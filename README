Parrot - a fortune picker.

Written by Michal Pokorný in 2012 as a semestral project in Programming I under
Martin Mareš. License: BSD 2-clause; please drop me a mail if you use this program
to do something interesting.

The program expects a fortune file in ./fortunes. The file should be a list of fortunes
with lines containing only "%" in between.

It saves some indexing data to ./index.dat.

Usage:
	./parrot --rebuild-index = rebuilds the index. This needs to be run before
		drawing any fortunes.
	
	./parrot = just reads the whole input and says something interesting.
	
	./parrot --echo = the same, just echoes the input before appending the fortune.

	./parrot --continuous = reads the whole input and says something interesting.
		Then it says something interesting about that after waiting for 10
		seconds, and repeats.

Usage as a mail signature generator:
	Pipe the mail through "parrot --echo". In a Vim macro:
		:noremap <C-E> :%!parrot --echo

Files:
	common.h
		Contains common type definitions and declarations.

	parrot.c
		Contains most fortune-picking code.

	tokenizer.{c|h}
		Tokenizes input.

	hash.{c|h}
		Calculates a hash of tokens for faster manipulation.

	index.{c|h}
		Implements an index that contains lists of fortunes for every significant token,
		plus a list of all fortunes.

	build-index.{c|h}
		Handles index building.

	fortune-set.{c|h}
		Saves "fortune - score" pairs and allows score-weighted random picking.

	lcs.{c|h}
		Calculates the length of the longest common substring of two hash_t arrays.

	examples/*
		Example inputs.

	fortunes
		Fortune files, concatenated together.


Short documentation:
	Every fortune is first split into "word tokens". Those are then sorted by "information value". Then every token
	in sorted order is used to find fortunes to "put into the hat". When the hat has 500 fortunes OR when the hat has
	at least 50 fortunes and 100 milliseconds already passed, the search is stopped.

	Then the hat is scored by "shared information" with the input, and a fortune is picked with weighting by the scores.
	The "shared information" score is partially based upon the length of the longest common subsequence (computed
	in O(N^2)).

	A list of "taboo fortunes" can be supplied to prevent short cycles in continuous mode.
